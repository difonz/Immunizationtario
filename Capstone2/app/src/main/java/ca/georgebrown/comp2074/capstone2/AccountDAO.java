package ca.georgebrown.comp2074.capstone2;

import androidx.lifecycle.LiveData;
import androidx.room.Dao;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;

import java.util.List;

@Dao
public interface AccountDAO {
    // INSERTS

    // void to return nothing, long to return the autogenerated ID of the inserted entity
    @Insert(onConflict = OnConflictStrategy.IGNORE)
    long insertPersonal(PersonalAccount personalAccount);

    @Insert(onConflict = OnConflictStrategy.IGNORE)
    long insertDoctor(DoctorAccount doctorAccount);

    @Insert(onConflict = OnConflictStrategy.IGNORE)
    long insertSchool(SchoolAccount schoolAccount);

    @Insert(onConflict = OnConflictStrategy.IGNORE)
    long insertMember(MemberAccount memberAccount);

    @Insert(onConflict = OnConflictStrategy.IGNORE)
    long insertImmunization(Immunization immunization);

    @Insert(onConflict = OnConflictStrategy.IGNORE)
    long insertImmunizationUser(Immunization_User immunization_user);

    @Insert(onConflict = OnConflictStrategy.IGNORE)
    long insertPatient(PatientAccount patientAccount);

    @Insert(onConflict = OnConflictStrategy.IGNORE)
    long insertStudent(StudentAccount studentAccount);

    // GETS

    @Query("SELECT * FROM member_table WHERE accountID = :id ORDER BY NAME ASC")
    LiveData<List<MemberAccount>> getMembers(long id);

    @Query("SELECT * FROM member_table")
    LiveData<List<MemberAccount>> getMemberAccounts();

    @Query("SELECT * FROM personal_table")
    LiveData<List<PersonalAccount>> getPersonalAccounts();

    @Query("SELECT * FROM doctor_table")
    LiveData<List<DoctorAccount>> getDoctorAccounts();

    @Query("SELECT * FROM school_table")
    LiveData<List<SchoolAccount>> getSchoolAccounts();

    @Query("SELECT * FROM immunization_table ORDER BY NAME ASC")
    LiveData<List<Immunization>> getAllImmunizations();

    @Query("SELECT * FROM immunization_user WHERE userID = :userID")
    LiveData<List<Immunization_User>> getUserImmunizations(long userID);

    @Query("SELECT * FROM personal_table WHERE id = :id")
    PersonalAccount getPersonalById(long id);

    @Query("SELECT * FROM doctor_table WHERE id = :id")
    DoctorAccount getDoctorById(long id);

    @Query("SELECT * FROM school_table WHERE id = :id")
    SchoolAccount getSchoolById(long id);

    @Query("SELECT * FROM member_table WHERE id = :id")
    MemberAccount getMemberById(long id);

    @Query("SELECT * FROM personal_table WHERE email = :email")
    PersonalAccount getPersonalByEmail(String email);

    @Query("SELECT * FROM doctor_table WHERE email = :email")
    DoctorAccount getDoctorByEmail(String email);

    @Query("SELECT * FROM school_table WHERE email = :email")
    SchoolAccount getSchoolByEmail(String email);

    @Query("SELECT * FROM patient_table WHERE doctorID = :doctorID")
    LiveData<List<PatientAccount>> getPatients(long doctorID);

    @Query("SELECT * FROM student_table WHERE schoolID = :schoolID")
    LiveData<List<StudentAccount>> getStudents(long schoolID);

    @Query("SELECT * FROM patient_table WHERE id = :id")
    PatientAccount getPatientById(long id);

    @Query("SELECT * FROM student_table WHERE id = :id")
    StudentAccount getStudentById(long id);

    // UPDATES

    @Query("UPDATE personal_table SET doctorID = :doctorID WHERE id = :id")
    void updatePersonalDoctor(long id, long doctorID);

    @Query("UPDATE personal_table SET schoolID = :schoolID WHERE id = :id")
    void updatePersonalSchool(long id, long schoolID);


    /* DELETES
    @Query("DELETE FROM personal_table")
    void deleteAllPersonal();

    @Query("DELETE FROM doctor_table")
    void deleteAllDoctor();

    @Query("DELETE FROM school_table")
    void deleteAllSchool();

    @Query("DELETE FROM immunization_table")
    void deleteAllImmunization();

    @Query("DELETE FROM immunization_user")
    void deleteAllImmunizationUsers();

    @Query("DELETE FROM member_table WHERE id = :id")
    void deleteMember(int id);
    */
}
